//------------------------------------------------------------------------------
// <auto-generated>
//    此代码是根据模板生成的。
//
//    手动更改此文件可能会导致应用程序中发生异常行为。
//    如果重新生成代码，则将覆盖对此文件的手动更改。
// </auto-generated>
//------------------------------------------------------------------------------

namespace InfrastructureService.Repository.DataAccess
{
    using System;
    using System.Data.Entity;
    using System.Data.Entity.Core.Objects;
    using System.Data.Entity.Infrastructure;
    using System.Linq;
    
    public partial class InfrastructureServiceEntities : DbContext
    {
        public InfrastructureServiceEntities()
            : base("name=InfrastructureServiceEntities")
        {
        }
    
        protected override void OnModelCreating(DbModelBuilder modelBuilder)
        {
            throw new UnintentionalCodeFirstException();
        }
    
        public DbSet<ActionLog> ActionLogs { get; set; }
        public DbSet<AppInfo> AppInfoes { get; set; }
        public DbSet<ComponentInfo> ComponentInfoes { get; set; }
        public DbSet<ControlInfo> ControlInfoes { get; set; }
        public DbSet<EmailConfig> EmailConfigs { get; set; }
        public DbSet<EmailMessage> EmailMessages { get; set; }
        public DbSet<Feedback> Feedbacks { get; set; }
        public DbSet<FileStorage> FileStorages { get; set; }
        public DbSet<FriendLink> FriendLinks { get; set; }
        public DbSet<News> News { get; set; }
        public DbSet<NewsCategory> NewsCategories { get; set; }
        public DbSet<RoleControlMap> RoleControlMaps { get; set; }
        public DbSet<RoleInfo> RoleInfoes { get; set; }
        public DbSet<SearchKeyword> SearchKeywords { get; set; }
        public DbSet<ServiceInfo> ServiceInfoes { get; set; }
        public DbSet<SiteAD> SiteADs { get; set; }
        public DbSet<SMSConfig> SMSConfigs { get; set; }
        public DbSet<SMSMessage> SMSMessages { get; set; }
        public DbSet<UserControlMap> UserControlMaps { get; set; }
        public DbSet<UserInfo> UserInfoes { get; set; }
    
        public virtual int msp_Assign_Role_Control(Nullable<System.Guid> roleID, string controlIDList, string permissionFlagsList)
        {
            var roleIDParameter = roleID.HasValue ?
                new ObjectParameter("RoleID", roleID) :
                new ObjectParameter("RoleID", typeof(System.Guid));
    
            var controlIDListParameter = controlIDList != null ?
                new ObjectParameter("ControlIDList", controlIDList) :
                new ObjectParameter("ControlIDList", typeof(string));
    
            var permissionFlagsListParameter = permissionFlagsList != null ?
                new ObjectParameter("PermissionFlagsList", permissionFlagsList) :
                new ObjectParameter("PermissionFlagsList", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("msp_Assign_Role_Control", roleIDParameter, controlIDListParameter, permissionFlagsListParameter);
        }
    
        public virtual int msp_Assign_User_Control(Nullable<System.Guid> userID, Nullable<System.Guid> controlID, Nullable<int> permissionFlags, Nullable<System.DateTime> beginDate, Nullable<System.DateTime> endDate)
        {
            var userIDParameter = userID.HasValue ?
                new ObjectParameter("UserID", userID) :
                new ObjectParameter("UserID", typeof(System.Guid));
    
            var controlIDParameter = controlID.HasValue ?
                new ObjectParameter("ControlID", controlID) :
                new ObjectParameter("ControlID", typeof(System.Guid));
    
            var permissionFlagsParameter = permissionFlags.HasValue ?
                new ObjectParameter("PermissionFlags", permissionFlags) :
                new ObjectParameter("PermissionFlags", typeof(int));
    
            var beginDateParameter = beginDate.HasValue ?
                new ObjectParameter("BeginDate", beginDate) :
                new ObjectParameter("BeginDate", typeof(System.DateTime));
    
            var endDateParameter = endDate.HasValue ?
                new ObjectParameter("EndDate", endDate) :
                new ObjectParameter("EndDate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("msp_Assign_User_Control", userIDParameter, controlIDParameter, permissionFlagsParameter, beginDateParameter, endDateParameter);
        }
    
        public virtual int msp_Assign_User_Role(Nullable<System.Guid> userID, string roleIDList)
        {
            var userIDParameter = userID.HasValue ?
                new ObjectParameter("UserID", userID) :
                new ObjectParameter("UserID", typeof(System.Guid));
    
            var roleIDListParameter = roleIDList != null ?
                new ObjectParameter("RoleIDList", roleIDList) :
                new ObjectParameter("RoleIDList", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("msp_Assign_User_Role", userIDParameter, roleIDListParameter);
        }
    
        public virtual int msp_BlockRole(Nullable<System.Guid> roleID)
        {
            var roleIDParameter = roleID.HasValue ?
                new ObjectParameter("RoleID", roleID) :
                new ObjectParameter("RoleID", typeof(System.Guid));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("msp_BlockRole", roleIDParameter);
        }
    
        public virtual int msp_GetUserComponent(Nullable<System.Guid> userID)
        {
            var userIDParameter = userID.HasValue ?
                new ObjectParameter("UserID", userID) :
                new ObjectParameter("UserID", typeof(System.Guid));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("msp_GetUserComponent", userIDParameter);
        }
    
        public virtual int msp_GetUserControl(Nullable<System.Guid> userID, Nullable<System.Guid> componentID)
        {
            var userIDParameter = userID.HasValue ?
                new ObjectParameter("UserID", userID) :
                new ObjectParameter("UserID", typeof(System.Guid));
    
            var componentIDParameter = componentID.HasValue ?
                new ObjectParameter("ComponentID", componentID) :
                new ObjectParameter("ComponentID", typeof(System.Guid));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("msp_GetUserControl", userIDParameter, componentIDParameter);
        }
    
        public virtual int msp_GetUserPermission(Nullable<System.Guid> userID, string path, ObjectParameter permissionFlags)
        {
            var userIDParameter = userID.HasValue ?
                new ObjectParameter("UserID", userID) :
                new ObjectParameter("UserID", typeof(System.Guid));
    
            var pathParameter = path != null ?
                new ObjectParameter("Path", path) :
                new ObjectParameter("Path", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("msp_GetUserPermission", userIDParameter, pathParameter, permissionFlags);
        }
    
        public virtual int msp_InsertRole(string name, string description, string controlIDList, string permissionFlagsList)
        {
            var nameParameter = name != null ?
                new ObjectParameter("Name", name) :
                new ObjectParameter("Name", typeof(string));
    
            var descriptionParameter = description != null ?
                new ObjectParameter("Description", description) :
                new ObjectParameter("Description", typeof(string));
    
            var controlIDListParameter = controlIDList != null ?
                new ObjectParameter("ControlIDList", controlIDList) :
                new ObjectParameter("ControlIDList", typeof(string));
    
            var permissionFlagsListParameter = permissionFlagsList != null ?
                new ObjectParameter("PermissionFlagsList", permissionFlagsList) :
                new ObjectParameter("PermissionFlagsList", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("msp_InsertRole", nameParameter, descriptionParameter, controlIDListParameter, permissionFlagsListParameter);
        }
    
        public virtual ObjectResult<msp_QueryRoleDetail_Result> msp_QueryRoleDetail(Nullable<System.Guid> roleID)
        {
            var roleIDParameter = roleID.HasValue ?
                new ObjectParameter("RoleID", roleID) :
                new ObjectParameter("RoleID", typeof(System.Guid));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<msp_QueryRoleDetail_Result>("msp_QueryRoleDetail", roleIDParameter);
        }
    }
}
